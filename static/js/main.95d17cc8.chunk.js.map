{"version":3,"sources":["components/BoardModel.js","components/formatTimeHHMM.js","components/TableRow/TableRow.js","components/BoardHeader/BoardHeader.js","components/StationBoard/StationBoard.jsx","App.js","reportWebVitals.js","index.js"],"names":["BoardModel","routeType","stationID","pageLimit","this","predictionsEndpoint","_buildPredictionsEndpoint","departuresUpdateSource","EventSource","dataStore","JsonApiDataStore","onResetDepartures","addEventListener","event","updatedDepartures","_parsePredictionsUpdate","close","queryParams","include","api_key","URLSearchParams","toString","sync","data","JSON","parse","findAll","map","prediction","_parsePrediction","filter","departureTime","status","sort","a","b","Date","slice","departure_time","schedule","destination","trip","headsign","trainNumber","name","trackNumber","formatTimeHHMM","date","toLocaleTimeString","hour","minute","TableRow","props","departure","className","toUpperCase","BoardHeader","componentDidMount","timeCheck","setInterval","_checkTime","componentWillUnmount","clearInterval","setState","time","state","dayOfWeek","toLocaleString","weekday","toLocaleDateString","clockTime","Component","StationBoard","model","listenForDepartureUpdates","stopListeningForDepartureUpdates","departures","departuresHeader","departureRows","i","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.95d17cc8.chunk.js","sourcesContent":["import { JsonApiDataStore } from \"jsonapi-datastore\";\r\n\r\nclass BoardModel {\r\n\tconstructor(routeType, stationID, pageLimit) {\r\n\t\tthis.routeType = routeType;\r\n\t\tthis.stationID = stationID;\r\n\t\tthis.pageLimit = pageLimit;\r\n\r\n\t\tconst predictionsEndpoint = this._buildPredictionsEndpoint();\r\n\t\tthis.departuresUpdateSource = new EventSource(predictionsEndpoint);\r\n\t\tthis.dataStore = new JsonApiDataStore();\r\n\t}\r\n\r\n\tlistenForDepartureUpdates(onResetDepartures) {\r\n\t\tthis.departuresUpdateSource.addEventListener(\"reset\", (event) => {\r\n\t\t\tconst updatedDepartures = this._parsePredictionsUpdate(event);\r\n\t\t\tonResetDepartures(updatedDepartures);\r\n\t\t});\r\n\t}\r\n\r\n\tstopListeningForDepartureUpdates() {\r\n\t\tthis.departuresUpdateSource.close();\r\n\t}\r\n\r\n\t_buildPredictionsEndpoint() {\r\n\t\tconst queryParams = {\r\n\t\t\t\"filter[route_type]\": this.routeType,\r\n\t\t\t\"filter[stop]\": this.stationID,\r\n\t\t\t\"page[limit]\": this.pageLimit,\r\n\t\t\tinclude: \"schedule,trip\",\r\n\t\t\t// api_key: process.env.REACT_APP_MBTA_API_KEY,\r\n\t\t\tapi_key: \"733619ae05cd45c98e82529a21b8497f\",\r\n\t\t};\r\n\r\n\t\treturn \"https://api-v3.mbta.com/predictions?\" + new URLSearchParams(queryParams).toString();\r\n\t}\r\n\r\n\t_parsePredictionsUpdate(event) {\r\n\t\t/**\r\n\t\t * Parses Event Stream updates from the MBTA Predictions endpoint. Because neither the prediction nor its related schedule\r\n\t\t * will always have a departure time, we filter out anything missing that data. We also filter out trips that have already\r\n\t\t * departed. Because we are falling back on the schedule departure time if the prediction departure time is missing, we can't\r\n\t\t * simply pass a sort param to the predictions endpoint. Instead, we manually sort the data by departure time ascending once\r\n\t\t * we've filtered it.\r\n\t\t *\r\n\t\t * TODO: find a better way to handle missing departure times if possible.\r\n\t\t */\r\n\r\n\t\t// We need to assign our parsed events data to an object \"data\" property to play nice with JsonAPIDataStore\r\n\t\tthis.dataStore.sync({ data: JSON.parse(event.data) });\r\n\r\n\t\tconst parsedPredictions = this.dataStore.findAll(\"prediction\").map((prediction) => this._parsePrediction(prediction));\r\n\r\n\t\tconst filteredPredictions = parsedPredictions.filter((prediction) => {\r\n\t\t\treturn prediction.departureTime && prediction.status !== \"Departed\";\r\n\t\t});\r\n\t\tconst sorted = filteredPredictions.sort((a, b) => new Date(a.departureTime) - new Date(b.departureTime));\r\n\r\n\t\treturn sorted.slice(0, 10);\r\n\t}\r\n\r\n\t_parsePrediction(prediction) {\r\n\t\t// We don't appear to have access to track number any more, although at one time it appeared as a prediction attribute -\r\n\t\t// \"stop_id\": https://www.mbta.com/developers/v3-api/changelog\r\n\r\n\t\treturn {\r\n\t\t\tdepartureTime: prediction?.departure_time || prediction.schedule?.departure_time,\r\n\t\t\tdestination: prediction.trip.headsign,\r\n\t\t\ttrainNumber: prediction.trip.name || \"TBD\",\r\n\t\t\ttrackNumber: \"TBD\",\r\n\t\t\tstatus: prediction.status || \"ON TIME\",\r\n\t\t};\r\n\t}\r\n}\r\n\r\nexport default BoardModel;\r\n","const formatTimeHHMM = (date) => {\r\n\treturn new Date(date).toLocaleTimeString([], { hour: \"2-digit\", minute: \"2-digit\" });\r\n};\r\n\r\nexport default formatTimeHHMM;\r\n","import formatTimeHHMM from \"../formatTimeHHMM\";\r\nimport \"./TableRow.css\";\r\n\r\nfunction TableRow(props) {\r\n\tconst departure = props.departure;\r\n\tconst departureTime = formatTimeHHMM(departure.departureTime);\r\n\r\n\treturn (\r\n\t\t<tr className=\"table-row\">\r\n\t\t\t<th>MBTA</th>\r\n\t\t\t<th>{departureTime}</th>\r\n\t\t\t<th>{departure.destination.toUpperCase()}</th>\r\n\t\t\t<th>{departure.trainNumber.toUpperCase()}</th>\r\n\t\t\t<th>{departure.trackNumber.toUpperCase()}</th>\r\n\t\t\t<th>{departure.status.toUpperCase()}</th>\r\n\t\t</tr>\r\n\t);\r\n}\r\n\r\nexport default TableRow;\r\n","import React, { Component } from \"react\";\r\nimport formatTimeHHMM from \"../formatTimeHHMM\";\r\nimport \"./BoardHeader.css\";\r\n\r\nclass BoardHeader extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\r\n\t\tthis.state = { time: new Date() };\r\n\t}\r\n\r\n\tcomponentDidMount = () => {\r\n\t\tthis.timeCheck = setInterval(() => this._checkTime(), 1000);\r\n\t};\r\n\r\n\tcomponentWillUnmount = () => {\r\n\t\tclearInterval(this.timeCheck);\r\n\t};\r\n\r\n\t_checkTime = () => {\r\n\t\tthis.setState({ time: new Date() });\r\n\t};\r\n\r\n\trender() {\r\n\t\tconst dayOfWeek = this.state.time.toLocaleString(\"en-us\", { weekday: \"long\" }).toUpperCase();\r\n\t\tconst date = this.state.time.toLocaleDateString();\r\n\t\tconst clockTime = formatTimeHHMM(this.state.time);\r\n\r\n\t\treturn (\r\n\t\t\t<div className=\"container-header\">\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<div>{dayOfWeek}</div>\r\n\t\t\t\t\t<div>{date}</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"title-header\">SOUTH STATION TRAIN INFORMATION</div>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<div>CURRENT TIME</div>\r\n\t\t\t\t\t<div>{clockTime}</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default BoardHeader;\r\n","import React, { Component } from \"react\";\r\nimport BoardModel from \"./../BoardModel\";\r\nimport TableRow from \"./../TableRow/TableRow.js\";\r\nimport BoardHeader from \"./../BoardHeader/BoardHeader.js\";\r\nimport \"./StationBoard.css\";\r\n\r\nclass StationBoard extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\r\n\t\t// Codes for Commuter Rail routes that stop at South Station\r\n\t\tconst routeType = 2;\r\n\t\tconst stationID = \"place-sstat\";\r\n\t\t// For now: load more than we plan to display as we need to filter out incomplete data\r\n\t\tconst pageLimit = 20;\r\n\r\n\t\tthis.model = new BoardModel(routeType, stationID, pageLimit);\r\n\t\tthis.state = { departures: [] };\r\n\t}\r\n\r\n\tcomponentDidMount = () => {\r\n\t\tthis.model.listenForDepartureUpdates(this.onResetDepartures);\r\n\t};\r\n\r\n\tcomponentWillUnmount = () => {\r\n\t\tthis.model.stopListeningForDepartureUpdates();\r\n\t};\r\n\r\n\tonResetDepartures = (departures) => {\r\n\t\tthis.setState({ departures: departures });\r\n\t};\r\n\r\n\trender() {\r\n\t\tconst departuresHeader = (\r\n\t\t\t<thead>\r\n\t\t\t\t<tr className=\"departuresHeader-board\">\r\n\t\t\t\t\t<th>CARRIER</th>\r\n\t\t\t\t\t<th>TIME</th>\r\n\t\t\t\t\t<th>DESTINATION</th>\r\n\t\t\t\t\t<th>TRAIN#</th>\r\n\t\t\t\t\t<th>TRACK#</th>\r\n\t\t\t\t\t<th>STATUS</th>\r\n\t\t\t\t</tr>\r\n\t\t\t</thead>\r\n\t\t);\r\n\r\n\t\tconst departureRows = this.state.departures.map((departure, i) => <TableRow key={i} departure={departure} />);\r\n\r\n\t\treturn (\r\n\t\t\t<div className=\"container-board\">\r\n\t\t\t\t<BoardHeader />\r\n\t\t\t\t<table className=\"table-board\">\r\n\t\t\t\t\t{departuresHeader}\r\n\t\t\t\t\t<tbody>{departureRows}</tbody>\r\n\t\t\t\t</table>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default StationBoard;\r\n","import React from \"react\";\nimport StationBoard from \"./components/StationBoard/StationBoard.jsx\";\nimport \"./App.css\";\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<div className=\"board\">\n\t\t\t\t<StationBoard />\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n// import * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById(\"root\"),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n// serviceWorker.unregister();\n"],"sourceRoot":""}